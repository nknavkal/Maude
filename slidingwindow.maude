--- Alternating bit protocol.  October 2014.

--- The protocol does not terminate.

load full-maude26

--- First, various link models:

(omod MSG-CONTENT-LIST is
  sorts MsgContent MsgContentList .
  subsort MsgContent < MsgContentList .
  op nil : -> MsgContentList [ctor] .
  op _::_ : MsgContentList MsgContentList -> MsgContentList [ctor assoc id: nil] .
  op _withSeqNo_ : Content Nat -> MsgContent .
endom)

(omod LINK is
  protecting MSG-CONTENT-LIST .
  protecting NAT1 .
  class Link | content : MsgContentList .

  op _to_ : Oid Oid -> Oid [ctor] .
endom)

(omod LOSSY-LINK is
  protecting LINK .
  
  class LossyLink .
  subclass LossyLink < Link .

  vars MCL MCL' : MsgContentList .
  var M : MsgContent .
  vars SOURCE DEST : Oid .

  rl [lose-msg] :
     < SOURCE to DEST : LossyLink | content : MCL :: M :: MCL' >   =>
     < SOURCE to DEST : LossyLink | content : MCL :: MCL' > .
endom)

(omod DUPLICATING-LINK is    --- not to be used for ABP!
  protecting LINK .

  class DuplLink .
  subclass DuplLink < Link .
 
  vars MCL MCL' : MsgContentList .
  var M : MsgContent .
  vars SOURCE DEST : Oid .
 
  rl [duplMsg] :
     < SOURCE to DEST : DuplLink | content : MCL :: M :: MCL' >   =>
     < SOURCE to DEST : DuplLink | content : MCL :: M :: MCL' :: M > .
endom)

(omod UNREL-LINK is
  protecting LOSSY-LINK .
  protecting DUPLICATING-LINK .

  class UnrelLink .
  subclass UnrelLink < LossyLink DuplLink .
endom)


--- Datatype for bits
(fmod BIT is
  sort Bit .
  ops 0 1 : -> Bit [ctor] .
  op not : Bit -> Bit .
  eq not(0) = 1 .
  eq not(1) = 0 .
endfm)



--- Then the message types:

(omod MESSAGES is        --- same as for TCP-unordered, except with bits
  protecting STRING .
  protecting BIT .
  sort Content .
  subsort String < Content .   --- our "main" messages are just strings!
  op ack : -> Content [ctor] . --- acknowledgment message  

  --- sequence number wrapper:
  msg _withBit_ : Content Bit -> MsgContent .
endom)


--- A module for LISTS of Strings:
(fmod STRING-LIST is protecting STRING .
  sort StringList .
  subsort String < StringList .
  op nil : -> StringList [ctor] .
  op _++_ : StringList StringList -> StringList [ctor assoc id: nil] .
endfm)


--- Here comes the actual protocol:
(omod SLIDING-WINDOW is 
  including STRING-LIST .
  including MESSAGES .
  including LOSSY-LINK.

  --- Sender protocol:
  class Sender | msgsToSend : StringList,   --- messages not sent yet
                 sendingWindow : StringList,   --- list of possible msgs that can be sent
                 windowSize : Nat           --- width of the window
                 windowLeft : NAT1          --- index of the left side of the window
                 windowRight : Nat          --- index of the right side of the sliding window 
                 receiver : Oid .           --- receiver address        


  vars A B N N' K : Nat .
  vars O O' : Oid .
  var S S' T T' : String .
  var SL SL' : StringList .
  var MCL : MsgContentList .

  rl [start] :
     < O : Sender | msgsToSend : S ++ SL, sendingWindow : nil, windowSize : K, windowLeft : 0 >
    =>
     < O : Sender | msgsToSend : SL, sendingWindow : S, windowRight : K > 

  crl [sendCurrentMsg] :      
     < O : Sender | currentMsg : S, windowLeft : A, windowRight : B, receiver : O' >  
     < O to O' : LossyLink | content : MCL >
    =>
     < O : Sender | >
     < O to O' : LossyLink | content : MCL :: (S withBit B) > .
     if 

  crl [receiveValidAck] : 
     < O : Sender | msgsToSend : S ++ SL, sendingWindow: S' ++ SL', windowLeft : A, windowRight : B, >
     < O' to O : LossyLink | content : (ack withSeqNo N) :: MCL >
    =>
     < O : Sender | msgsToSend : SL, sendingWindow: SL' ++ S, windowLeft : s(A), windowRight : s(B), >
     < O' to O : LossyLink | content : (ack withSeqNo N) :: MCL >
     if N >= A

  rl [receiveAckLast] :
     < O : Sender | currentBit : B, msgsToSend : S >
     < O' to O : LossyLink | content : (ack withBit B) :: MCL >
     =>
     < O : Sender | currentBit : not(B), currentMsg : nil > 
     < O' to O : LossyLink | content : MCL > .

  rl [receiveWrongAck] : 
     < O : Sender | currentBit : B, msgsToSend : S ++ SL >
     < O' to O : LossyLink | content : (ack withBit not(B)) :: MCL >
    =>
     < O : Sender | >
     < O' to O : LossyLink | content : MCL > . 



  --- Receiver protocol:
  class Receiver | msgsRcvd : StringList,   ---  list of strings so far, or nil
                 currentBit : Bit,          --- bit to current msg 
                 sender : Oid .           --- sender address 
  rl [sendAck] :
     < O' : Receiver | msgRcvd : SL, currentBit : Bit > 
     < O' to O : LossyLink | content : MCL > 
     =>
     < O' : Receiver | >
     < O' to O : LossyLink | content : MCL :: (ack withBit Bit) >

  rl [rcvNewPacket] :
    < O' : Receiver | msgRcvd : SL, currentBit : Bit > 
    < O to O' : LossyLink | content : (S withBit not(Bit)) :: MCL > 
    =>
    < O' : Receiver | msgRcvd : SL ++ S, currentBit : not(Bit) > 
    < O to O' : LossyLink | content : MCL >

  rl [rcvWrongPacket] :
    < O' : Receiver | msgRcvd : SL, currentBit : Bit > 
    < O to O' : LossyLink | content : (S withBit Bit) :: MCL > 
    =>
    < O' : Receiver | >
    < O to O' : LossyLink | content : MCL >



  *** REST IS LEFT IS AN EXERCISE   

endom)